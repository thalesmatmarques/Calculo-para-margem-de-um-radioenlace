# Código para calcular a atenuação devido às chuvas em um radienlace

import math
import numpy as np


def khorizontal(freq):
    frequencia = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                  47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                  72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                  97, 98, 99, 100, 120, 150, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
    kh = [0.0000259, 0.0000443, 0.0000847, 0.0001321, 0.0001390, 0.0001155, 0.0001071, 0.0001340, 0.0002162, 0.0003909,
          0.0007056, 0.001915, 0.004115, 0.007535, 0.01217, 0.01772, 0.02386, 0.03041, 0.03738, 0.04481, 0.05282,
          0.06146, 0.07078, 0.08084, 0.09164, 0.1032, 0.1155, 0.1286, 0.1425, 0.1571, 0.1724, 0.1884, 0.2051, 0.2224,
          0.2403, 0.2588, 0.2778, 0.2972, 0.3171, 0.3374, 0.3580, 0.3789, 0.4001, 0.4215, 0.4431, 0.4647, 0.4865,
          0.5084, 0.5302, 0.5521, 0.5738, 0.5956, 0.6172, 0.6386, 0.6600, 0.6811, 0.7020, 0.7228, 0.7433, 0.7635,
          0.7835, 0.8032, 0.8226, 0.8418, 0.8606, 0.8791, 0.8974, 0.9153, 0.9328, 0.9501, 0.9670, 0.9836, 0.9999,
          1.0159, 1.0315, 1.0468, 1.0618, 1.0764, 1.0908, 1.1048, 1.1185, 1.1320, 1.1451, 1.1579, 1.1704, 1.1827,
          1.1946, 1.2063, 1.2177, 1.2289, 1.2398, 1.2504, 1.2607, 1.2708, 1.2807, 1.2903, 1.2997, 1.3089, 1.3179,
          1.3266, 1.3351, 1.3434, 1.3515, 1.3594, 1.3671, 1.4866, 1.5823, 1.6378, 1.6286, 1.5860, 1.5418, 1.5013,
          1.4654, 1.4335, 1.4050, 1.3795]
    logfreq = np.log10(freq)
    logfrequencia = np.log10(frequencia)
    logkh = np.log10(kh)
    khinterp = np.power(10.0, np.interp(logfreq, logfrequencia, logkh))
    return khinterp


def kvertical(freq):
    frequencia = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                  47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                  72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                  97, 98, 99, 100, 120, 150, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
    kv = [0.0000308, 0.0000574, 0.0000998, 0.0001464, 0.0001942, 0.0002346, 0.0002461, 0.0002347, 0.0002428, 0.0003115,
          0.0004878, 0.001425, 0.003450, 0.006691, 0.01129, 0.01731, 0.02455, 0.03266, 0.04126, 0.05008,
          0.05899, 0.06797, 0.07708, 0.08642, 0.09611, 0.1063, 0.1170, 0.1284, 0.1404, 0.1533, 0.1669, 0.1813, 0.1964,
          0.2124, 0.2291, 0.2465, 0.2646, 0.2833, 0.3026, 0.3224, 0.3427, 0.3633, 0.3844, 0.4058, 0.4274, 0.4492,
          0.4712, 0.4932, 0.5153, 0.5375, 0.5596, 0.5817, 0.6037, 0.6255, 0.6472, 0.6687, 0.6901, 0.7112, 0.7321,
          0.7527, 0.7730, 0.7931, 0.8129, 0.8324, 0.8515, 0.8704, 0.8889, 0.9071, 0.9250, 0.9425, 0.9598, 0.9767,
          0.9932, 1.0094, 1.0253, 1.0409, 1.0561, 1.0711, 1.0857, 1.1000, 1.1139, 1.1276, 1.1410, 1.1541, 1.1668,
          1.1793, 1.1915, 1.2034, 1.2151, 1.2265, 1.2376, 1.2484, 1.2590, 1.2694, 1.2795, 1.2893, 1.2989, 1.3083,
          1.3175, 1.3265, 1.3352, 1.3437, 1.3520, 1.3601, 1.3680, 1.4911, 1.5896, 1.6443, 1.6286, 1.5820, 1.5366,
          1.4967, 1.4622, 1.4321, 1.4056, 1.3822]
    logfreq = np.log10(freq)
    logfrequencia = np.log10(frequencia)
    logkv = np.log10(kv)
    kvinterp = np.power(10.0, np.interp(logfreq, logfrequencia, logkv))
    return kvinterp


def alfahorizontal(freq):
    frequencia = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                  47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                  72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                  97, 98, 99, 100, 120, 150, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
    ah = [0.9691, 1.0185, 1.0664, 1.1209, 1.2322, 1.4189, 1.6009, 1.6948, 1.6969, 1.6499, 1.5900, 1.4810, 1.3905,
          1.3155, 1.2571, 1.2140, 1.1825, 1.1586, 1.1396, 1.1233, 1.1086, 1.0949, 1.0818, 1.0691, 1.0568, 1.0447,
          1.0329, 1.0214, 1.0101, 0.9991, 0.9884, 0.9780, 0.9679, 0.9580, 0.9485, 0.9392, 0.9302, 0.9214, 0.9129,
          0.9047, 0.8967, 0.8890, 0.8816, 0.8743, 0.8673, 0.8605, 0.8539, 0.8476, 0.8414, 0.8355, 0.8297, 0.8241,
          0.8187, 0.8134, 0.8084, 0.8034, 0.7987, 0.7941, 0.7896, 0.7853, 0.7811, 0.7771, 0.7731, 0.7693, 0.7656,
          0.7621, 0.7586, 0.7552, 0.7520, 0.7488, 0.7458, 0.7428, 0.7400, 0.7372, 0.7345, 0.7318, 0.7293, 0.7268,
          0.7244, 0.7221, 0.7199, 0.7177, 0.7156, 0.7135, 0.7115, 0.7096, 0.7077, 0.7058, 0.7040, 0.7023, 0.7006,
          0.6990, 0.6974, 0.6959, 0.6944, 0.6929, 0.6915, 0.6901, 0.6888, 0.6875, 0.6862, 0.6850, 0.6838, 0.6826,
          0.6815, 0.6640, 0.6494, 0.6382, 0.6296, 0.6262, 0.6253, 0.6262, 0.6284, 0.6315, 0.6353, 0.6396]
    ahinterp = np.interp(freq, frequencia, ah)
    return ahinterp


def alfavertical(freq):
    frequencia = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
                  47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                  72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                  97, 98, 99, 100, 120, 150, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
    av = [0.8592, 0.8957, 0.9490, 1.0085, 1.0688, 1.1387, 1.2476, 1.3987, 1.5317, 1.5882, 1.5728, 1.4745, 1.3797, 1.2895,
          1.2156, 1.1617, 1.1216, 1.0901, 1.0646, 1.0440, 1.0273, 1.0137,
          1.0025, 0.9930, 0.9847, 0.9771, 0.9700, 0.9630, 0.9561, 0.9491, 0.9421, 0.9349, 0.9277, 0.9203, 0.9129,
          0.9055, 0.8981, 0.8907, 0.8834, 0.8761, 0.8690, 0.8621, 0.8552, 0.8486, 0.8421, 0.8357, 0.8296, 0.8236,
          0.8179, 0.8123, 0.8069, 0.8017, 0.7967, 0.7918, 0.7871, 0.7826, 0.7783, 0.7741, 0.7700, 0.7661, 0.7623,
          0.7587, 0.7552, 0.7518, 0.7486, 0.7454, 0.7424, 0.7395, 0.7366, 0.7339, 0.7313, 0.7287, 0.7262, 0.7238,
          0.7215, 0.7193, 0.7171, 0.7150, 0.7130, 0.7110, 0.7091, 0.7073, 0.7055, 0.7038, 0.7021, 0.7004, 0.6988,
          0.6973, 0.6958, 0.6943, 0.6929, 0.6915, 0.6902, 0.6889, 0.6876, 0.6864, 0.6852, 0.6840, 0.6828, 0.6817,
          0.6806, 0.6796, 0.6785, 0.6775, 0.6765, 0.6609, 0.6466, 0.6343, 0.6262, 0.6256, 0.6272, 0.6293, 0.6315,
          0.6334, 0.6351, 0.6395]
    avinterp = np.interp(freq, frequencia, av)
    return avinterp


def k_circular_e_linear(kh, kv, angulo):
    k = 1/2 * (kh + kv + ((kh - kv)*(math.cos(angulo)**2)))
    return k


def alfa_circular_e_linear(kh, kv, k, av, ah, angulo):
    alfa = 1/(2*k)*((kh*ah)+(kv*av)+((kh*ah)-(kv*av)*math.cos(angulo)**2))
    return alfa


def caminho_efetivo(dist, intensidade_chuva, alfa, freq):
    r = 1 / (0.477*(dist**0.633)*(intensidade_chuva**(0.073*alfa))*(freq*0.123)-(10.579*(1-(2.718281828*dist))))
    dist_efetivo = r * dist
    return dist_efetivo


def at_especifica_chuva(alfa, k, intensidade_chuva, distancia_efetivo):
    at_espec = k * (intensidade_chuva**alfa)
    at_chuva = at_espec * distancia_efetivo
    return at_chuva
